
LAB11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005354  08005354  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800535c  0800535c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005360  08005360  00015360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08005364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000028  0800538c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800538c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e977  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da9  00000000  00000000  0002e9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00030778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00031668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d07  00000000  00000000  000324d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001011a  00000000  00000000  000481df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c2c3  00000000  00000000  000582f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e45bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004068  00000000  00000000  000e4610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005324 	.word	0x08005324

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08005324 	.word	0x08005324

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fc78 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f84e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f97e 	bl	80007dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f952 	bl	8000788 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8b2 	bl	800064c <MX_I2C1_Init>
  MX_TIM5_Init();
 80004e8:	f000 f8de 	bl	80006a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004ec:	2064      	movs	r0, #100	; 0x64
 80004ee:	f000 fcdd 	bl	8000eac <HAL_Delay>
  IOExpenderInit();
 80004f2:	f000 fa63 	bl	80009bc <IOExpenderInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if(micros()-timestamp > 100)
 80004f6:	f000 f9fd 	bl	80008f4 <micros>
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <main+0x94>)
 80004fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0503 	sbc.w	r5, r1, r3
 8000506:	2d00      	cmp	r5, #0
 8000508:	bf08      	it	eq
 800050a:	2c65      	cmpeq	r4, #101	; 0x65
 800050c:	d3f3      	bcc.n	80004f6 <main+0x26>
		{
			timestamp = micros();
 800050e:	f000 f9f1 	bl	80008f4 <micros>
 8000512:	4602      	mov	r2, r0
 8000514:	460b      	mov	r3, r1
 8000516:	4913      	ldr	r1, [pc, #76]	; (8000564 <main+0x94>)
 8000518:	e9c1 2300 	strd	r2, r3, [r1]
			User_Button[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800051c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <main+0x98>)
 8000522:	f000 ffad 	bl	8001480 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <main+0x9c>)
 800052c:	701a      	strb	r2, [r3, #0]
			if(User_Button[1] == GPIO_PIN_SET && User_Button[0] == GPIO_PIN_RESET)
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <main+0x9c>)
 8000530:	785b      	ldrb	r3, [r3, #1]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d111      	bne.n	800055a <main+0x8a>
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <main+0x9c>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10d      	bne.n	800055a <main+0x8a>
			{
				EEPROMWriteExample();
 800053e:	f000 f9f3 	bl	8000928 <EEPROMWriteExample>
				EEPROMReadExample(eepromDataReadBack, 4);
 8000542:	2104      	movs	r1, #4
 8000544:	480a      	ldr	r0, [pc, #40]	; (8000570 <main+0xa0>)
 8000546:	f000 fa13 	bl	8000970 <EEPROMReadExample>

				IOExpenderReadPinA(&IOExpdrDataReadBack);
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0xa4>)
 800054c:	f000 fa4c 	bl	80009e8 <IOExpenderReadPinA>
				IOExpenderWritePinB(IOExpdrDataReadBack);
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <main+0xa4>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fa6b 	bl	8000a30 <IOExpenderWritePinB>
			}
			User_Button[1] = User_Button[0];
 800055a:	4b04      	ldr	r3, [pc, #16]	; (800056c <main+0x9c>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b03      	ldr	r3, [pc, #12]	; (800056c <main+0x9c>)
 8000560:	705a      	strb	r2, [r3, #1]
		if(micros()-timestamp > 100)
 8000562:	e7c8      	b.n	80004f6 <main+0x26>
 8000564:	20000050 	.word	0x20000050
 8000568:	40020800 	.word	0x40020800
 800056c:	200000fc 	.word	0x200000fc
 8000570:	20000100 	.word	0x20000100
 8000574:	200000b0 	.word	0x200000b0

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fec4 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 f9f0 	bl	80039e4 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060a:	f000 fa3b 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fc52 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000636:	f000 fa25 	bl	8000a84 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_I2C1_Init+0x50>)
 8000652:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_I2C1_Init+0x54>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_I2C1_Init+0x50>)
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x58>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_I2C1_Init+0x50>)
 800066a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_I2C1_Init+0x50>)
 800068a:	f000 ff2b 	bl	80014e4 <HAL_I2C_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000694:	f000 f9f6 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000005c 	.word	0x2000005c
 80006a0:	40005400 	.word	0x40005400
 80006a4:	00061a80 	.word	0x00061a80

080006a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80006d2:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006d4:	4a2b      	ldr	r2, [pc, #172]	; (8000784 <MX_TIM5_Init+0xdc>)
 80006d6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 80006d8:	4b29      	ldr	r3, [pc, #164]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006da:	2263      	movs	r2, #99	; 0x63
 80006dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006e6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80006f8:	4821      	ldr	r0, [pc, #132]	; (8000780 <MX_TIM5_Init+0xd8>)
 80006fa:	f003 fde7 	bl	80042cc <HAL_TIM_Base_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f9be 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	4619      	mov	r1, r3
 8000714:	481a      	ldr	r0, [pc, #104]	; (8000780 <MX_TIM5_Init+0xd8>)
 8000716:	f004 f81d 	bl	8004754 <HAL_TIM_ConfigClockSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000720:	f000 f9b0 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000724:	4816      	ldr	r0, [pc, #88]	; (8000780 <MX_TIM5_Init+0xd8>)
 8000726:	f003 fe20 	bl	800436a <HAL_TIM_IC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000730:	f000 f9a8 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <MX_TIM5_Init+0xd8>)
 8000744:	f004 fb2a 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 800074e:	f000 f999 	bl	8000a84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000756:	2301      	movs	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM5_Init+0xd8>)
 800076a:	f003 ff5f 	bl	800462c <HAL_TIM_IC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8000774:	f000 f986 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000b4 	.word	0x200000b4
 8000784:	40000c00 	.word	0x40000c00

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f004 fb6e 	bl	8004ea0 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f95b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000104 	.word	0x20000104
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a25      	ldr	r2, [pc, #148]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_GPIO_Init+0xd0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_GPIO_Init+0xd0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <MX_GPIO_Init+0xd4>)
 8000868:	f000 fe22 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_GPIO_Init+0xd8>)
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_GPIO_Init+0xdc>)
 8000882:	f000 fc79 	bl	8001178 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_GPIO_Init+0xd4>)
 800089e:	f000 fc6b 	bl	8001178 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	10210000 	.word	0x10210000
 80008b8:	40020800 	.word	0x40020800

080008bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b4b0      	push	{r4, r5, r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d109      	bne.n	80008e0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d2:	f112 34ff 	adds.w	r4, r2, #4294967295
 80008d6:	f143 0500 	adc.w	r5, r3, #0
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80008dc:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bcb0      	pop	{r4, r5, r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	200000b4 	.word	0x200000b4
 80008f0:	20000048 	.word	0x20000048

080008f4 <micros>:

uint64_t micros()
{
 80008f4:	b4b0      	push	{r4, r5, r7}
 80008f6:	af00      	add	r7, sp, #0
	return (_micros + htim5.Instance->CNT);//counter of Timer 5
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <micros+0x2c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fe:	4618      	mov	r0, r3
 8000900:	f04f 0100 	mov.w	r1, #0
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <micros+0x30>)
 8000906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800090a:	1884      	adds	r4, r0, r2
 800090c:	eb41 0503 	adc.w	r5, r1, r3
 8000910:	4622      	mov	r2, r4
 8000912:	462b      	mov	r3, r5
}
 8000914:	4610      	mov	r0, r2
 8000916:	4619      	mov	r1, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bcb0      	pop	{r4, r5, r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	200000b4 	.word	0x200000b4
 8000924:	20000048 	.word	0x20000048

08000928 <EEPROMWriteExample>:

void EEPROMWriteExample() {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <EEPROMWriteExample+0x3c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d012      	beq.n	800095c <EEPROMWriteExample+0x34>
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <EEPROMWriteExample+0x40>)
 8000938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b20      	cmp	r3, #32
 8000940:	d10c      	bne.n	800095c <EEPROMWriteExample+0x34>

		static uint8_t data[4] = { 0xff, 0x00, 0x55, 0xaa };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,
 8000942:	2304      	movs	r3, #4
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <EEPROMWriteExample+0x44>)
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2310      	movs	r3, #16
 800094c:	222c      	movs	r2, #44	; 0x2c
 800094e:	21a0      	movs	r1, #160	; 0xa0
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <EEPROMWriteExample+0x40>)
 8000952:	f001 f805 	bl	8001960 <HAL_I2C_Mem_Write_IT>
				data, 4);



		eepromExampleWriteFlag = 0;
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <EEPROMWriteExample+0x3c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
	}
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000044 	.word	0x20000044
 8000968:	2000005c 	.word	0x2000005c
 800096c:	20000000 	.word	0x20000000

08000970 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af02      	add	r7, sp, #8
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800097c:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <EEPROMReadExample+0x44>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d012      	beq.n	80009aa <EEPROMReadExample+0x3a>
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <EEPROMReadExample+0x48>)
 8000986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b20      	cmp	r3, #32
 800098e:	d10c      	bne.n	80009aa <EEPROMReadExample+0x3a>

		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	9301      	str	r3, [sp, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2310      	movs	r3, #16
 800099a:	222c      	movs	r2, #44	; 0x2c
 800099c:	21a0      	movs	r1, #160	; 0xa0
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <EEPROMReadExample+0x48>)
 80009a0:	f001 f890 	bl	8001ac4 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromExampleReadFlag = 0;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <EEPROMReadExample+0x44>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	}
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000045 	.word	0x20000045
 80009b8:	2000005c 	.word	0x2000005c

080009bc <IOExpenderInit>:
void IOExpenderInit() {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af04      	add	r7, sp, #16
	//Init All
	static uint8_t Setting[0x16] = { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00 };
	HAL_I2C_Mem_Write(&hi2c1, IOEXPD_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2316      	movs	r3, #22
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <IOExpenderInit+0x24>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <IOExpenderInit+0x28>)
 80009d6:	f000 fec9 	bl	800176c <HAL_I2C_Mem_Write>
			0x16, 100);
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	2000005c 	.word	0x2000005c

080009e8 <IOExpenderReadPinA>:
void IOExpenderReadPinA(uint8_t *Rdata) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	6078      	str	r0, [r7, #4]
	if (IOExpdrExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <IOExpenderReadPinA+0x40>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d012      	beq.n	8000a1e <IOExpenderReadPinA+0x36>
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <IOExpenderReadPinA+0x44>)
 80009fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b20      	cmp	r3, #32
 8000a02:	d10c      	bne.n	8000a1e <IOExpenderReadPinA+0x36>
		HAL_I2C_Mem_Read_IT(&hi2c1, IOEXPD_ADDR, 0x12, I2C_MEMADD_SIZE_8BIT,
 8000a04:	2301      	movs	r3, #1
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	2212      	movs	r2, #18
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <IOExpenderReadPinA+0x44>)
 8000a14:	f001 f856 	bl	8001ac4 <HAL_I2C_Mem_Read_IT>
				Rdata, 1);
		IOExpdrExampleReadFlag =0;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <IOExpenderReadPinA+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000047 	.word	0x20000047
 8000a2c:	2000005c 	.word	0x2000005c

08000a30 <IOExpenderWritePinB>:
void IOExpenderWritePinB(uint8_t Wdata) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
	if (IOExpdrExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <IOExpenderWritePinB+0x48>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d015      	beq.n	8000a6e <IOExpenderWritePinB+0x3e>
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <IOExpenderWritePinB+0x4c>)
 8000a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	2b20      	cmp	r3, #32
 8000a4c:	d10f      	bne.n	8000a6e <IOExpenderWritePinB+0x3e>
		static uint8_t data;
		data = Wdata;
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <IOExpenderWritePinB+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write_IT(&hi2c1, IOEXPD_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT,
 8000a54:	2301      	movs	r3, #1
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <IOExpenderWritePinB+0x50>)
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2215      	movs	r2, #21
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <IOExpenderWritePinB+0x4c>)
 8000a64:	f000 ff7c 	bl	8001960 <HAL_I2C_Mem_Write_IT>
				&data, 1);
		IOExpdrExampleWriteFlag=0;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <IOExpenderWritePinB+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000046 	.word	0x20000046
 8000a7c:	2000005c 	.word	0x2000005c
 8000a80:	20000058 	.word	0x20000058

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f000 fae0 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <HAL_I2C_MspInit+0xa4>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d13c      	bne.n	8000b7c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b20      	ldr	r3, [pc, #128]	; (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b24:	2312      	movs	r3, #18
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b30:	2304      	movs	r3, #4
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <HAL_I2C_MspInit+0xac>)
 8000b3c:	f000 fb1c 	bl	8001178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <HAL_I2C_MspInit+0xa8>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	201f      	movs	r0, #31
 8000b62:	f000 faa2 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b66:	201f      	movs	r0, #31
 8000b68:	f000 fabb 	bl	80010e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2020      	movs	r0, #32
 8000b72:	f000 fa9a 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b76:	2020      	movs	r0, #32
 8000b78:	f000 fab3 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM5)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_TIM_Base_MspInit+0x94>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d133      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_TIM_Base_MspInit+0x98>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a1b      	ldr	r2, [pc, #108]	; (8000c28 <HAL_TIM_Base_MspInit+0x98>)
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_TIM_Base_MspInit+0x98>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_TIM_Base_MspInit+0x98>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <HAL_TIM_Base_MspInit+0x98>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_TIM_Base_MspInit+0x98>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bea:	2301      	movs	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_TIM_Base_MspInit+0x9c>)
 8000c06:	f000 fab7 	bl	8001178 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2032      	movs	r0, #50	; 0x32
 8000c10:	f000 fa4b 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c14:	2032      	movs	r0, #50	; 0x32
 8000c16:	f000 fa64 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40000c00 	.word	0x40000c00
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f000 fa67 	bl	8001178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f8ae 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <I2C1_EV_IRQHandler+0x10>)
 8000d1a:	f000 ff91 	bl	8001c40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000005c 	.word	0x2000005c

08000d28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <I2C1_ER_IRQHandler+0x10>)
 8000d2e:	f001 f8f4 	bl	8001f1a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000005c 	.word	0x2000005c

08000d3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <TIM5_IRQHandler+0x10>)
 8000d42:	f003 fb6b 	bl	800441c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000b4 	.word	0x200000b4

08000d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x20>)
 8000d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <SystemInit+0x20>)
 8000d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d7a:	490e      	ldr	r1, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	; (8000db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d90:	4c0b      	ldr	r4, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d9e:	f7ff ffd7 	bl	8000d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000da2:	f004 fa93 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da6:	f7ff fb93 	bl	80004d0 <main>
  bx  lr    
 8000daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000db8:	08005364 	.word	0x08005364
  ldr r2, =_sbss
 8000dbc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000dc0:	2000014c 	.word	0x2000014c

08000dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_Init+0x40>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_Init+0x40>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_Init+0x40>)
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f94f 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fe48 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023c00 	.word	0x40023c00

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f967 	bl	80010fe <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f92f 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	; (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000001c 	.word	0x2000001c
 8000e64:	20000024 	.word	0x20000024
 8000e68:	20000020 	.word	0x20000020

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000024 	.word	0x20000024
 8000e90:	20000148 	.word	0x20000148

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000148 	.word	0x20000148

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000024 	.word	0x20000024

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d004      	beq.n	8001134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00c      	b.n	800114e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2205      	movs	r2, #5
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001168:	b2db      	uxtb	r3, r3
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	e159      	b.n	8001448 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8148 	bne.w	8001442 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d005      	beq.n	80011ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d130      	bne.n	800122c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f003 0201 	and.w	r2, r3, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b03      	cmp	r3, #3
 8001236:	d017      	beq.n	8001268 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d123      	bne.n	80012bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	220f      	movs	r2, #15
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0203 	and.w	r2, r3, #3
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a2 	beq.w	8001442 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a56      	ldr	r2, [pc, #344]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b54      	ldr	r3, [pc, #336]	; (8001460 <HAL_GPIO_Init+0x2e8>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131a:	4a52      	ldr	r2, [pc, #328]	; (8001464 <HAL_GPIO_Init+0x2ec>)
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a49      	ldr	r2, [pc, #292]	; (8001468 <HAL_GPIO_Init+0x2f0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x202>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2f4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x1fe>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_GPIO_Init+0x2f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x1fa>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_GPIO_Init+0x2fc>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x1f6>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a45      	ldr	r2, [pc, #276]	; (8001478 <HAL_GPIO_Init+0x300>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x1f2>
 8001366:	2304      	movs	r3, #4
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x204>
 800136a:	2307      	movs	r3, #7
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x204>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x204>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x204>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x204>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x2ec>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_GPIO_Init+0x304>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_GPIO_Init+0x304>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_GPIO_Init+0x304>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <HAL_GPIO_Init+0x304>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_GPIO_Init+0x304>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_GPIO_Init+0x304>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_GPIO_Init+0x304>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_GPIO_Init+0x304>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f aea2 	bls.w	8001194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40013c00 	.word	0x40013c00

08001480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e001      	b.n	80014a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e12b      	b.n	800174e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fae8 	bl	8000ae0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2224      	movs	r2, #36	; 0x24
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001548:	f002 fe98 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 800154c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a81      	ldr	r2, [pc, #516]	; (8001758 <HAL_I2C_Init+0x274>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d807      	bhi.n	8001568 <HAL_I2C_Init+0x84>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a80      	ldr	r2, [pc, #512]	; (800175c <HAL_I2C_Init+0x278>)
 800155c:	4293      	cmp	r3, r2
 800155e:	bf94      	ite	ls
 8001560:	2301      	movls	r3, #1
 8001562:	2300      	movhi	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e006      	b.n	8001576 <HAL_I2C_Init+0x92>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a7d      	ldr	r2, [pc, #500]	; (8001760 <HAL_I2C_Init+0x27c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0e7      	b.n	800174e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a78      	ldr	r2, [pc, #480]	; (8001764 <HAL_I2C_Init+0x280>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	430a      	orrs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_I2C_Init+0x274>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d802      	bhi.n	80015b8 <HAL_I2C_Init+0xd4>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3301      	adds	r3, #1
 80015b6:	e009      	b.n	80015cc <HAL_I2C_Init+0xe8>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a69      	ldr	r2, [pc, #420]	; (8001768 <HAL_I2C_Init+0x284>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	3301      	adds	r3, #1
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	495c      	ldr	r1, [pc, #368]	; (8001758 <HAL_I2C_Init+0x274>)
 80015e8:	428b      	cmp	r3, r1
 80015ea:	d819      	bhi.n	8001620 <HAL_I2C_Init+0x13c>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e59      	subs	r1, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001600:	400b      	ands	r3, r1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_I2C_Init+0x138>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1e59      	subs	r1, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fbb1 f3f3 	udiv	r3, r1, r3
 8001614:	3301      	adds	r3, #1
 8001616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161a:	e051      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 800161c:	2304      	movs	r3, #4
 800161e:	e04f      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <HAL_I2C_Init+0x168>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e012      	b.n	8001672 <HAL_I2C_Init+0x18e>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e58      	subs	r0, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001662:	3301      	adds	r3, #1
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Init+0x196>
 8001676:	2301      	movs	r3, #1
 8001678:	e022      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10e      	bne.n	80016a0 <HAL_I2C_Init+0x1bc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e58      	subs	r0, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	440b      	add	r3, r1
 8001690:	fbb0 f3f3 	udiv	r3, r0, r3
 8001694:	3301      	adds	r3, #1
 8001696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	e00f      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	0099      	lsls	r1, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	6809      	ldr	r1, [r1, #0]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6911      	ldr	r1, [r2, #16]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68d2      	ldr	r2, [r2, #12]
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	430b      	orrs	r3, r1
 8001702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	000186a0 	.word	0x000186a0
 800175c:	001e847f 	.word	0x001e847f
 8001760:	003d08ff 	.word	0x003d08ff
 8001764:	431bde83 	.word	0x431bde83
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	817b      	strh	r3, [r7, #10]
 800177e:	460b      	mov	r3, r1
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001786:	f7ff fb85 	bl	8000e94 <HAL_GetTick>
 800178a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b20      	cmp	r3, #32
 8001796:	f040 80d9 	bne.w	800194c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2319      	movs	r3, #25
 80017a0:	2201      	movs	r2, #1
 80017a2:	496d      	ldr	r1, [pc, #436]	; (8001958 <HAL_I2C_Mem_Write+0x1ec>)
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f001 ff49 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0cc      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_I2C_Mem_Write+0x56>
 80017be:	2302      	movs	r3, #2
 80017c0:	e0c5      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d007      	beq.n	80017e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2221      	movs	r2, #33	; 0x21
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2240      	movs	r2, #64	; 0x40
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a3a      	ldr	r2, [r7, #32]
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29a      	uxth	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4a4d      	ldr	r2, [pc, #308]	; (800195c <HAL_I2C_Mem_Write+0x1f0>)
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800182a:	88f8      	ldrh	r0, [r7, #6]
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	8979      	ldrh	r1, [r7, #10]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4603      	mov	r3, r0
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f001 fdc0 	bl	80033c0 <I2C_RequestMemoryWrite>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d052      	beq.n	80018ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e081      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f001 ffca 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00d      	beq.n	8001876 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b04      	cmp	r3, #4
 8001860:	d107      	bne.n	8001872 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06b      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	781a      	ldrb	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29b      	uxth	r3, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d11b      	bne.n	80018ec <HAL_I2C_Mem_Write+0x180>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d017      	beq.n	80018ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1aa      	bne.n	800184a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f001 ffb6 	bl	800386a <I2C_WaitOnBTFFlagUntilTimeout>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00d      	beq.n	8001920 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	2b04      	cmp	r3, #4
 800190a:	d107      	bne.n	800191c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800191a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e016      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	00100002 	.word	0x00100002
 800195c:	ffff0000 	.word	0xffff0000

08001960 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	4608      	mov	r0, r1
 800196a:	4611      	mov	r1, r2
 800196c:	461a      	mov	r2, r3
 800196e:	4603      	mov	r3, r0
 8001970:	817b      	strh	r3, [r7, #10]
 8001972:	460b      	mov	r3, r1
 8001974:	813b      	strh	r3, [r7, #8]
 8001976:	4613      	mov	r3, r2
 8001978:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b20      	cmp	r3, #32
 8001988:	f040 808e 	bne.w	8001aa8 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_I2C_Mem_Write_IT+0x158>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_I2C_Mem_Write_IT+0x15c>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	0a1a      	lsrs	r2, r3, #8
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2220      	movs	r2, #32
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f043 0220 	orr.w	r2, r3, #32
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e064      	b.n	8001aaa <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d0db      	beq.n	80019a6 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <HAL_I2C_Mem_Write_IT+0x9c>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e056      	b.n	8001aaa <HAL_I2C_Mem_Write_IT+0x14a>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d007      	beq.n	8001a22 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2221      	movs	r2, #33	; 0x21
 8001a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2240      	movs	r2, #64	; 0x40
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a17      	ldr	r2, [pc, #92]	; (8001ac0 <HAL_I2C_Mem_Write_IT+0x160>)
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001a64:	897a      	ldrh	r2, [r7, #10]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001a6a:	893a      	ldrh	r2, [r7, #8]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001aa2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2000001c 	.word	0x2000001c
 8001abc:	14f8b589 	.word	0x14f8b589
 8001ac0:	ffff0000 	.word	0xffff0000

08001ac4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	817b      	strh	r3, [r7, #10]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	813b      	strh	r3, [r7, #8]
 8001ada:	4613      	mov	r3, r2
 8001adc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	f040 809a 	bne.w	8001c24 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_I2C_Mem_Read_IT+0x170>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	4a50      	ldr	r2, [pc, #320]	; (8001c38 <HAL_I2C_Mem_Read_IT+0x174>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0a1a      	lsrs	r2, r3, #8
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009a      	lsls	r2, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d116      	bne.n	8001b44 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e070      	b.n	8001c26 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d0db      	beq.n	8001b0a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2C_Mem_Read_IT+0x9c>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e062      	b.n	8001c26 <HAL_I2C_Mem_Read_IT+0x162>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d007      	beq.n	8001b86 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b94:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2222      	movs	r2, #34	; 0x22
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a3a      	ldr	r2, [r7, #32]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_I2C_Mem_Read_IT+0x178>)
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001bc8:	897a      	ldrh	r2, [r7, #10]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001bce:	893a      	ldrh	r2, [r7, #8]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bee:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001c1e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	371c      	adds	r7, #28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000001c 	.word	0x2000001c
 8001c38:	14f8b589 	.word	0x14f8b589
 8001c3c:	ffff0000 	.word	0xffff0000

08001c40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c60:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c68:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b10      	cmp	r3, #16
 8001c6e:	d003      	beq.n	8001c78 <HAL_I2C_EV_IRQHandler+0x38>
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	f040 80bd 	bne.w	8001df2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_I2C_EV_IRQHandler+0x6e>
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c98:	d003      	beq.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x62>
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_EV_IRQHandler+0x66>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_I2C_EV_IRQHandler+0x68>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	f000 812e 	beq.w	8001f0a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00c      	beq.n	8001cd2 <HAL_I2C_EV_IRQHandler+0x92>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	0a5b      	lsrs	r3, r3, #9
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f001 fe72 	bl	80039ae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fd62 	bl	8002794 <I2C_Master_SB>
 8001cd0:	e08e      	b.n	8001df0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0xb2>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	0a5b      	lsrs	r3, r3, #9
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fdd8 	bl	80028a0 <I2C_Master_ADD10>
 8001cf0:	e07e      	b.n	8001df0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0xd2>
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	0a5b      	lsrs	r3, r3, #9
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fdf2 	bl	80028f4 <I2C_Master_ADDR>
 8001d10:	e06e      	b.n	8001df0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d037      	beq.n	8001d8e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d2c:	f000 80ef 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	09db      	lsrs	r3, r3, #7
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00f      	beq.n	8001d5c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	0a9b      	lsrs	r3, r3, #10
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_I2C_EV_IRQHandler+0x11c>
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f9ef 	bl	8002138 <I2C_MasterTransmit_TXE>
 8001d5a:	e049      	b.n	8001df0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80d2 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	0a5b      	lsrs	r3, r3, #9
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80cb 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2b10      	cmp	r3, #16
 8001d7c:	d103      	bne.n	8001d86 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa76 	bl	8002270 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d84:	e0c3      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fada 	bl	8002340 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d8c:	e0bf      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d9c:	f000 80b7 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00f      	beq.n	8001dcc <HAL_I2C_EV_IRQHandler+0x18c>
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d009      	beq.n	8001dcc <HAL_I2C_EV_IRQHandler+0x18c>
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d103      	bne.n	8001dcc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fb4a 	bl	800245e <I2C_MasterReceive_RXNE>
 8001dca:	e011      	b.n	8001df0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 809a 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	0a5b      	lsrs	r3, r3, #9
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8093 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fbe9 	bl	80025c0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dee:	e08e      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
 8001df0:	e08d      	b.n	8001f0e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d004      	beq.n	8001e04 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e007      	b.n	8001e14 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d012      	beq.n	8001e46 <HAL_I2C_EV_IRQHandler+0x206>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00c      	beq.n	8001e46 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e3c:	69b9      	ldr	r1, [r7, #24]
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 ffa7 	bl	8002d92 <I2C_Slave_ADDR>
 8001e44:	e066      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_I2C_EV_IRQHandler+0x226>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	0a5b      	lsrs	r3, r3, #9
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 ffdc 	bl	8002e1c <I2C_Slave_STOPF>
 8001e64:	e056      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	2b21      	cmp	r3, #33	; 0x21
 8001e6a:	d002      	beq.n	8001e72 <HAL_I2C_EV_IRQHandler+0x232>
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	2b29      	cmp	r3, #41	; 0x29
 8001e70:	d125      	bne.n	8001ebe <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	09db      	lsrs	r3, r3, #7
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00f      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0x25e>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	0a9b      	lsrs	r3, r3, #10
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0x25e>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 febd 	bl	8002c16 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e9c:	e039      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d033      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d2>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	0a5b      	lsrs	r3, r3, #9
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d02d      	beq.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 feea 	bl	8002c90 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ebc:	e029      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00f      	beq.n	8001eea <HAL_I2C_EV_IRQHandler+0x2aa>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	0a9b      	lsrs	r3, r3, #10
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_I2C_EV_IRQHandler+0x2aa>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fef5 	bl	8002cd2 <I2C_SlaveReceive_RXNE>
 8001ee8:	e014      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00e      	beq.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	0a5b      	lsrs	r3, r3, #9
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 ff23 	bl	8002d4e <I2C_SlaveReceive_BTF>
 8001f08:	e004      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b08a      	sub	sp, #40	; 0x28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f3c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <HAL_I2C_ER_IRQHandler+0x4e>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f66:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	0a5b      	lsrs	r3, r3, #9
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00e      	beq.n	8001f92 <HAL_I2C_ER_IRQHandler+0x78>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f90:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	0a9b      	lsrs	r3, r3, #10
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d03f      	beq.n	800201e <HAL_I2C_ER_IRQHandler+0x104>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d039      	beq.n	800201e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001faa:	7efb      	ldrb	r3, [r7, #27]
 8001fac:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fc4:	7ebb      	ldrb	r3, [r7, #26]
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d112      	bne.n	8001ff0 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b21      	cmp	r3, #33	; 0x21
 8001fd4:	d008      	beq.n	8001fe8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001fd6:	7cfb      	ldrb	r3, [r7, #19]
 8001fd8:	2b29      	cmp	r3, #41	; 0x29
 8001fda:	d005      	beq.n	8001fe8 <HAL_I2C_ER_IRQHandler+0xce>
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	2b28      	cmp	r3, #40	; 0x28
 8001fe0:	d106      	bne.n	8001ff0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b21      	cmp	r3, #33	; 0x21
 8001fe6:	d103      	bne.n	8001ff0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f001 f847 	bl	800307c <I2C_Slave_AF>
 8001fee:	e016      	b.n	800201e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002002:	7efb      	ldrb	r3, [r7, #27]
 8002004:	2b10      	cmp	r3, #16
 8002006:	d002      	beq.n	800200e <HAL_I2C_ER_IRQHandler+0xf4>
 8002008:	7efb      	ldrb	r3, [r7, #27]
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d107      	bne.n	800201e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	0adb      	lsrs	r3, r3, #11
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00e      	beq.n	8002048 <HAL_I2C_ER_IRQHandler+0x12e>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002046:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 f87e 	bl	800315c <I2C_ITError>
  }
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
 80020c4:	4613      	mov	r3, r2
 80020c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002146:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800214e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d150      	bne.n	8002200 <I2C_MasterTransmit_TXE+0xc8>
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b21      	cmp	r3, #33	; 0x21
 8002162:	d14d      	bne.n	8002200 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b08      	cmp	r3, #8
 8002168:	d01d      	beq.n	80021a6 <I2C_MasterTransmit_TXE+0x6e>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b20      	cmp	r3, #32
 800216e:	d01a      	beq.n	80021a6 <I2C_MasterTransmit_TXE+0x6e>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002176:	d016      	beq.n	80021a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002186:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2211      	movs	r2, #17
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff62 	bl	8002068 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021a4:	e060      	b.n	8002268 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d107      	bne.n	80021f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff7d 	bl	80020e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021ee:	e03b      	b.n	8002268 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff35 	bl	8002068 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021fe:	e033      	b.n	8002268 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b21      	cmp	r3, #33	; 0x21
 8002204:	d005      	beq.n	8002212 <I2C_MasterTransmit_TXE+0xda>
 8002206:	7bbb      	ldrb	r3, [r7, #14]
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d12d      	bne.n	8002268 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b22      	cmp	r3, #34	; 0x22
 8002210:	d12a      	bne.n	8002268 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d108      	bne.n	800222e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800222c:	e01c      	b.n	8002268 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	d103      	bne.n	8002242 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f880 	bl	8002340 <I2C_MemoryTransmit_TXE_BTF>
}
 8002240:	e012      	b.n	8002268 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002266:	e7ff      	b.n	8002268 <I2C_MasterTransmit_TXE+0x130>
 8002268:	bf00      	nop
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b21      	cmp	r3, #33	; 0x21
 8002288:	d156      	bne.n	8002338 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d012      	beq.n	80022ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022b8:	e03e      	b.n	8002338 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d01d      	beq.n	80022fc <I2C_MasterTransmit_BTF+0x8c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d01a      	beq.n	80022fc <I2C_MasterTransmit_BTF+0x8c>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022cc:	d016      	beq.n	80022fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2211      	movs	r2, #17
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff feb7 	bl	8002068 <HAL_I2C_MasterTxCpltCallback>
}
 80022fa:	e01d      	b.n	8002338 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800230a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fe98 	bl	8002068 <HAL_I2C_MasterTxCpltCallback>
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11d      	bne.n	8002394 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10b      	bne.n	8002378 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002364:	b2da      	uxtb	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002376:	e06e      	b.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	b29b      	uxth	r3, r3
 800237e:	121b      	asrs	r3, r3, #8
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002392:	e060      	b.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	2b01      	cmp	r3, #1
 800239a:	d10b      	bne.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023b2:	e050      	b.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d14c      	bne.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	2b22      	cmp	r3, #34	; 0x22
 80023c0:	d108      	bne.n	80023d4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d0:	601a      	str	r2, [r3, #0]
}
 80023d2:	e040      	b.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d015      	beq.n	800240a <I2C_MemoryTransmit_TXE_BTF+0xca>
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b21      	cmp	r3, #33	; 0x21
 80023e2:	d112      	bne.n	800240a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002408:	e025      	b.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d120      	bne.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b21      	cmp	r3, #33	; 0x21
 8002418:	d11d      	bne.n	8002456 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002428:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002438:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fe49 	bl	80020e8 <HAL_I2C_MemTxCpltCallback>
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b22      	cmp	r3, #34	; 0x22
 8002470:	f040 80a2 	bne.w	80025b8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d921      	bls.n	80024c6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	f040 8082 	bne.w	80025b8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80024c4:	e078      	b.n	80025b8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d074      	beq.n	80025b8 <I2C_MasterReceive_RXNE+0x15a>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d002      	beq.n	80024da <I2C_MasterReceive_RXNE+0x7c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d16e      	bne.n	80025b8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f001 fa06 	bl	80038ec <I2C_WaitOnSTOPRequestThroughIT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d142      	bne.n	800256c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002504:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d10a      	bne.n	8002556 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fdd4 	bl	80020fc <HAL_I2C_MemRxCpltCallback>
}
 8002554:	e030      	b.n	80025b8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2212      	movs	r2, #18
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fd89 	bl	800207c <HAL_I2C_MasterRxCpltCallback>
}
 800256a:	e025      	b.n	80025b8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800257a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fdac 	bl	8002110 <HAL_I2C_ErrorCallback>
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d11b      	bne.n	8002610 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800260e:	e0bd      	b.n	800278c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b03      	cmp	r3, #3
 8002618:	d129      	bne.n	800266e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002628:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00a      	beq.n	8002646 <I2C_MasterReceive_BTF+0x86>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d007      	beq.n	8002646 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800266c:	e08e      	b.n	800278c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d176      	bne.n	8002766 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d002      	beq.n	8002684 <I2C_MasterReceive_BTF+0xc4>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b10      	cmp	r3, #16
 8002682:	d108      	bne.n	8002696 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e019      	b.n	80026ca <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d002      	beq.n	80026a2 <I2C_MasterReceive_BTF+0xe2>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d108      	bne.n	80026b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00a      	b.n	80026ca <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d007      	beq.n	80026ca <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002724:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d10a      	bne.n	8002750 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fcd7 	bl	80020fc <HAL_I2C_MemRxCpltCallback>
}
 800274e:	e01d      	b.n	800278c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2212      	movs	r2, #18
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fc8c 	bl	800207c <HAL_I2C_MasterRxCpltCallback>
}
 8002764:	e012      	b.n	800278c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d117      	bne.n	80027d8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027c0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80027c2:	e067      	b.n	8002894 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	611a      	str	r2, [r3, #16]
}
 80027d6:	e05d      	b.n	8002894 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e0:	d133      	bne.n	800284a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b21      	cmp	r3, #33	; 0x21
 80027ec:	d109      	bne.n	8002802 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	e008      	b.n	8002814 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <I2C_Master_SB+0x92>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d108      	bne.n	8002838 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	2b00      	cmp	r3, #0
 800282c:	d032      	beq.n	8002894 <I2C_Master_SB+0x100>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02d      	beq.n	8002894 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002846:	605a      	str	r2, [r3, #4]
}
 8002848:	e024      	b.n	8002894 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	b29b      	uxth	r3, r3
 8002858:	11db      	asrs	r3, r3, #7
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f003 0306 	and.w	r3, r3, #6
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f063 030f 	orn	r3, r3, #15
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	611a      	str	r2, [r3, #16]
}
 800286e:	e011      	b.n	8002894 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10d      	bne.n	8002894 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	b29b      	uxth	r3, r3
 800287e:	11db      	asrs	r3, r3, #7
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f003 0306 	and.w	r3, r3, #6
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f063 030e 	orn	r3, r3, #14
 800288c:	b2da      	uxtb	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	611a      	str	r2, [r3, #16]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <I2C_Master_ADD10+0x26>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d108      	bne.n	80028d8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <I2C_Master_ADD10+0x48>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e6:	605a      	str	r2, [r3, #4]
  }
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b091      	sub	sp, #68	; 0x44
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b22      	cmp	r3, #34	; 0x22
 800291c:	f040 8169 	bne.w	8002bf2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <I2C_Master_ADDR+0x54>
 8002928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d10b      	bne.n	8002948 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002930:	2300      	movs	r3, #0
 8002932:	633b      	str	r3, [r7, #48]	; 0x30
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	633b      	str	r3, [r7, #48]	; 0x30
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	e160      	b.n	8002c0a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11d      	bne.n	800298c <I2C_Master_ADDR+0x98>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002958:	d118      	bne.n	800298c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295a:	2300      	movs	r3, #0
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	651a      	str	r2, [r3, #80]	; 0x50
 800298a:	e13e      	b.n	8002c0a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e115      	b.n	8002bea <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 808a 	bne.w	8002ade <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d0:	d137      	bne.n	8002a42 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f0:	d113      	bne.n	8002a1a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	e0e7      	b.n	8002bea <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	623b      	str	r3, [r7, #32]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	623b      	str	r3, [r7, #32]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e0d3      	b.n	8002bea <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d02e      	beq.n	8002aa6 <I2C_Master_ADDR+0x1b2>
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d02b      	beq.n	8002aa6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	2b12      	cmp	r3, #18
 8002a52:	d102      	bne.n	8002a5a <I2C_Master_ADDR+0x166>
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d125      	bne.n	8002aa6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d00e      	beq.n	8002a7e <I2C_Master_ADDR+0x18a>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d00b      	beq.n	8002a7e <I2C_Master_ADDR+0x18a>
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d008      	beq.n	8002a7e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e007      	b.n	8002a8e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a8c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	e0a1      	b.n	8002bea <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e085      	b.n	8002bea <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d14d      	bne.n	8002b84 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d016      	beq.n	8002b1c <I2C_Master_ADDR+0x228>
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d013      	beq.n	8002b1c <I2C_Master_ADDR+0x228>
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d010      	beq.n	8002b1c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e007      	b.n	8002b2c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b2a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b3a:	d117      	bne.n	8002b6c <I2C_Master_ADDR+0x278>
 8002b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b42:	d00b      	beq.n	8002b5c <I2C_Master_ADDR+0x268>
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d008      	beq.n	8002b5c <I2C_Master_ADDR+0x268>
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d005      	beq.n	8002b5c <I2C_Master_ADDR+0x268>
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d002      	beq.n	8002b5c <I2C_Master_ADDR+0x268>
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d107      	bne.n	8002b6c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	e032      	b.n	8002bea <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b92:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba2:	d117      	bne.n	8002bd4 <I2C_Master_ADDR+0x2e0>
 8002ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002baa:	d00b      	beq.n	8002bc4 <I2C_Master_ADDR+0x2d0>
 8002bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d008      	beq.n	8002bc4 <I2C_Master_ADDR+0x2d0>
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d005      	beq.n	8002bc4 <I2C_Master_ADDR+0x2d0>
 8002bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d002      	beq.n	8002bc4 <I2C_Master_ADDR+0x2d0>
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d107      	bne.n	8002bd4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002bf0:	e00b      	b.n	8002c0a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	e7ff      	b.n	8002c0a <I2C_Master_ADDR+0x316>
 8002c0a:	bf00      	nop
 8002c0c:	3744      	adds	r7, #68	; 0x44
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02b      	beq.n	8002c88 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d114      	bne.n	8002c88 <I2C_SlaveTransmit_TXE+0x72>
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b29      	cmp	r3, #41	; 0x29
 8002c62:	d111      	bne.n	8002c88 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2221      	movs	r2, #33	; 0x21
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2228      	movs	r2, #40	; 0x28
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fa04 	bl	8002090 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d011      	beq.n	8002cc6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02c      	beq.n	8002d46 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d114      	bne.n	8002d46 <I2C_SlaveReceive_RXNE+0x74>
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d20:	d111      	bne.n	8002d46 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2222      	movs	r2, #34	; 0x22
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2228      	movs	r2, #40	; 0x28
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff f9af 	bl	80020a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d012      	beq.n	8002d86 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dac:	2b28      	cmp	r3, #40	; 0x28
 8002dae:	d127      	bne.n	8002e00 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	09db      	lsrs	r3, r3, #7
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	81bb      	strh	r3, [r7, #12]
 8002de2:	e002      	b.n	8002dea <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002df2:	89ba      	ldrh	r2, [r7, #12]
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff f95d 	bl	80020b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dfe:	e008      	b.n	8002e12 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0202 	mvn.w	r2, #2
 8002e08:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e3a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e68:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e78:	d172      	bne.n	8002f60 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b22      	cmp	r3, #34	; 0x22
 8002e7e:	d002      	beq.n	8002e86 <I2C_Slave_STOPF+0x6a>
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b2a      	cmp	r3, #42	; 0x2a
 8002e84:	d135      	bne.n	8002ef2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f043 0204 	orr.w	r2, r3, #4
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe f94b 	bl	800115a <HAL_DMA_GetState>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d049      	beq.n	8002f5e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	4a69      	ldr	r2, [pc, #420]	; (8003074 <I2C_Slave_STOPF+0x258>)
 8002ed0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f91d 	bl	8001116 <HAL_DMA_Abort_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03d      	beq.n	8002f5e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eec:	4610      	mov	r0, r2
 8002eee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ef0:	e035      	b.n	8002f5e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0204 	orr.w	r2, r3, #4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f915 	bl	800115a <HAL_DMA_GetState>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d014      	beq.n	8002f60 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <I2C_Slave_STOPF+0x258>)
 8002f3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe f8e7 	bl	8001116 <HAL_DMA_Abort_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4798      	blx	r3
 8002f5c:	e000      	b.n	8002f60 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f5e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d03e      	beq.n	8002fe8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d112      	bne.n	8002f9e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	d112      	bne.n	8002fd2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f043 0204 	orr.w	r2, r3, #4
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f8b3 	bl	800315c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002ff6:	e039      	b.n	800306c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffc:	d109      	bne.n	8003012 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2228      	movs	r2, #40	; 0x28
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff f849 	bl	80020a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b28      	cmp	r3, #40	; 0x28
 800301c:	d111      	bne.n	8003042 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a15      	ldr	r2, [pc, #84]	; (8003078 <I2C_Slave_STOPF+0x25c>)
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff f84a 	bl	80020d4 <HAL_I2C_ListenCpltCallback>
}
 8003040:	e014      	b.n	800306c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	2b22      	cmp	r3, #34	; 0x22
 8003048:	d002      	beq.n	8003050 <I2C_Slave_STOPF+0x234>
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b22      	cmp	r3, #34	; 0x22
 800304e:	d10d      	bne.n	800306c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff f81c 	bl	80020a4 <HAL_I2C_SlaveRxCpltCallback>
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	080034ed 	.word	0x080034ed
 8003078:	ffff0000 	.word	0xffff0000

0800307c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d002      	beq.n	800309e <I2C_Slave_AF+0x22>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b20      	cmp	r3, #32
 800309c:	d129      	bne.n	80030f2 <I2C_Slave_AF+0x76>
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b28      	cmp	r3, #40	; 0x28
 80030a2:	d126      	bne.n	80030f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <I2C_Slave_AF+0xdc>)
 80030a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fff2 	bl	80020d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80030f0:	e02e      	b.n	8003150 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b21      	cmp	r3, #33	; 0x21
 80030f6:	d126      	bne.n	8003146 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <I2C_Slave_AF+0xdc>)
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003122:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe ffa6 	bl	8002090 <HAL_I2C_SlaveTxCpltCallback>
}
 8003144:	e004      	b.n	8003150 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800314e:	615a      	str	r2, [r3, #20]
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	ffff0000 	.word	0xffff0000

0800315c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003172:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003174:	7bbb      	ldrb	r3, [r7, #14]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d002      	beq.n	8003180 <I2C_ITError+0x24>
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d10a      	bne.n	8003196 <I2C_ITError+0x3a>
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b22      	cmp	r3, #34	; 0x22
 8003184:	d107      	bne.n	8003196 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003194:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800319c:	2b28      	cmp	r3, #40	; 0x28
 800319e:	d107      	bne.n	80031b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2228      	movs	r2, #40	; 0x28
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031ae:	e015      	b.n	80031dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031be:	d00a      	beq.n	80031d6 <I2C_ITError+0x7a>
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b60      	cmp	r3, #96	; 0x60
 80031c4:	d007      	beq.n	80031d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d162      	bne.n	80032b2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d020      	beq.n	800324c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	4a6a      	ldr	r2, [pc, #424]	; (80033b8 <I2C_ITError+0x25c>)
 8003210:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd ff7d 	bl	8001116 <HAL_DMA_Abort_IT>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8089 	beq.w	8003336 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003246:	4610      	mov	r0, r2
 8003248:	4798      	blx	r3
 800324a:	e074      	b.n	8003336 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	4a59      	ldr	r2, [pc, #356]	; (80033b8 <I2C_ITError+0x25c>)
 8003252:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd ff5c 	bl	8001116 <HAL_DMA_Abort_IT>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d068      	beq.n	8003336 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d10b      	bne.n	800328a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691a      	ldr	r2, [r3, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ac:	4610      	mov	r0, r2
 80032ae:	4798      	blx	r3
 80032b0:	e041      	b.n	8003336 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b60      	cmp	r3, #96	; 0x60
 80032bc:	d125      	bne.n	800330a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d10b      	bne.n	80032f2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe ff0e 	bl	8002124 <HAL_I2C_AbortCpltCallback>
 8003308:	e015      	b.n	8003336 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	d10b      	bne.n	8003330 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fe feed 	bl	8002110 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10e      	bne.n	8003364 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003356:	2b00      	cmp	r3, #0
 8003358:	d104      	bne.n	8003364 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d113      	bne.n	80033b0 <I2C_ITError+0x254>
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b28      	cmp	r3, #40	; 0x28
 800338c:	d110      	bne.n	80033b0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <I2C_ITError+0x260>)
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe fe92 	bl	80020d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	080034ed 	.word	0x080034ed
 80033bc:	ffff0000 	.word	0xffff0000

080033c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	817b      	strh	r3, [r7, #10]
 80033d2:	460b      	mov	r3, r1
 80033d4:	813b      	strh	r3, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f920 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003410:	d103      	bne.n	800341a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e05f      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	461a      	mov	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800342c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	492d      	ldr	r1, [pc, #180]	; (80034e8 <I2C_RequestMemoryWrite+0x128>)
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f958 	bl	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04c      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f9c2 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02b      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	e021      	b.n	80034dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	b29b      	uxth	r3, r3
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f99c 	bl	80037e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d107      	bne.n	80034ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e005      	b.n	80034de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	00010002 	.word	0x00010002

080034ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003506:	4b4b      	ldr	r3, [pc, #300]	; (8003634 <I2C_DMAAbort+0x148>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	4a4a      	ldr	r2, [pc, #296]	; (8003638 <I2C_DMAAbort+0x14c>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0a1a      	lsrs	r2, r3, #8
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00da      	lsls	r2, r3, #3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003532:	e00a      	b.n	800354a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3b01      	subs	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003548:	d0ea      	beq.n	8003520 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	2200      	movs	r2, #0
 8003568:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	2200      	movs	r2, #0
 800358e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359c:	2200      	movs	r2, #0
 800359e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b60      	cmp	r3, #96	; 0x60
 80035ba:	d10e      	bne.n	80035da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7fe fda6 	bl	8002124 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d8:	e027      	b.n	800362a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035e0:	2b28      	cmp	r3, #40	; 0x28
 80035e2:	d117      	bne.n	8003614 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003602:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2228      	movs	r2, #40	; 0x28
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003612:	e007      	b.n	8003624 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003624:	6978      	ldr	r0, [r7, #20]
 8003626:	f7fe fd73 	bl	8002110 <HAL_I2C_ErrorCallback>
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000001c 	.word	0x2000001c
 8003638:	14f8b589 	.word	0x14f8b589

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e025      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d021      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fd fc1d 	bl	8000e94 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e023      	b.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10d      	bne.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf0c      	ite	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	2300      	movne	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	e00c      	b.n	80036da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d0b6      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f8:	e051      	b.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003708:	d123      	bne.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e046      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d021      	beq.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7fd fb9b 	bl	8000e94 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d116      	bne.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e020      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10c      	bne.n	80037c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e00b      	b.n	80037da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d18d      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f8aa 	bl	8003950 <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02d      	b.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d021      	beq.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fd fb41 	bl	8000e94 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d1ca      	bne.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003876:	e02d      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f869 	bl	8003950 <I2C_IsAcknowledgeFailed>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e02d      	b.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d021      	beq.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003890:	f7fd fb00 	bl	8000e94 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e007      	b.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d1ca      	bne.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	08db      	lsrs	r3, r3, #3
 80038fe:	4a13      	ldr	r2, [pc, #76]	; (800394c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	0a1a      	lsrs	r2, r3, #8
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b01      	subs	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d107      	bne.n	800392a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e008      	b.n	800393c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d0e9      	beq.n	800390e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	2000001c 	.word	0x2000001c
 800394c:	14f8b589 	.word	0x14f8b589

08003950 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d11b      	bne.n	80039a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003970:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	f043 0204 	orr.w	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039be:	d103      	bne.n	80039c8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80039c6:	e007      	b.n	80039d8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039d0:	d102      	bne.n	80039d8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2208      	movs	r2, #8
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e264      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d075      	beq.n	8003aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a02:	4ba3      	ldr	r3, [pc, #652]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d00c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d112      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4b9d      	ldr	r3, [pc, #628]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4b99      	ldr	r3, [pc, #612]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d05b      	beq.n	8003aec <HAL_RCC_OscConfig+0x108>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d157      	bne.n	8003aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e23f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a48:	d106      	bne.n	8003a58 <HAL_RCC_OscConfig+0x74>
 8003a4a:	4b91      	ldr	r3, [pc, #580]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a90      	ldr	r2, [pc, #576]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e01d      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a60:	d10c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x98>
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a8a      	ldr	r2, [pc, #552]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a87      	ldr	r2, [pc, #540]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	4b84      	ldr	r3, [pc, #528]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a83      	ldr	r2, [pc, #524]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a80      	ldr	r2, [pc, #512]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d013      	beq.n	8003ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fd f9fa 	bl	8000e94 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fd f9f6 	bl	8000e94 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e204      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0xc0>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd f9e6 	bl	8000e94 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003acc:	f7fd f9e2 	bl	8000e94 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b64      	cmp	r3, #100	; 0x64
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e1f0      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ade:	4b6c      	ldr	r3, [pc, #432]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0xe8>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d063      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afa:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d116      	bne.n	8003b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1e:	4b5c      	ldr	r3, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d001      	beq.n	8003b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e1c4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b56      	ldr	r3, [pc, #344]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4952      	ldr	r1, [pc, #328]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e03a      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b54:	4b4f      	ldr	r3, [pc, #316]	; (8003c94 <HAL_RCC_OscConfig+0x2b0>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd f99b 	bl	8000e94 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fd f997 	bl	8000e94 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e1a5      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b74:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b80:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4940      	ldr	r1, [pc, #256]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e015      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b96:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_OscConfig+0x2b0>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fd f97a 	bl	8000e94 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fd f976 	bl	8000e94 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e184      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d030      	beq.n	8003c30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <HAL_RCC_OscConfig+0x2b4>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bdc:	f7fd f95a 	bl	8000e94 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fd f956 	bl	8000e94 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e164      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x200>
 8003c02:	e015      	b.n	8003c30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c04:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_RCC_OscConfig+0x2b4>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd f943 	bl	8000e94 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fd f93f 	bl	8000e94 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e14d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80a0 	beq.w	8003d7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x2b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d121      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_RCC_OscConfig+0x2b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_RCC_OscConfig+0x2b8>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fd f905 	bl	8000e94 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCC_OscConfig+0x2ce>
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800
 8003c94:	42470000 	.word	0x42470000
 8003c98:	42470e80 	.word	0x42470e80
 8003c9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca0:	f7fd f8f8 	bl	8000e94 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e106      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb2:	4b85      	ldr	r3, [pc, #532]	; (8003ec8 <HAL_RCC_OscConfig+0x4e4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f0      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x2f0>
 8003cc6:	4b81      	ldr	r3, [pc, #516]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a80      	ldr	r2, [pc, #512]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	e01c      	b.n	8003d0e <HAL_RCC_OscConfig+0x32a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d10c      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x312>
 8003cdc:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	4a7a      	ldr	r2, [pc, #488]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce8:	4b78      	ldr	r3, [pc, #480]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	4a77      	ldr	r2, [pc, #476]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	e00b      	b.n	8003d0e <HAL_RCC_OscConfig+0x32a>
 8003cf6:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a74      	ldr	r2, [pc, #464]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
 8003d02:	4b72      	ldr	r3, [pc, #456]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a71      	ldr	r2, [pc, #452]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d015      	beq.n	8003d42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd f8bd 	bl	8000e94 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd f8b9 	bl	8000e94 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0c5      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ee      	beq.n	8003d1e <HAL_RCC_OscConfig+0x33a>
 8003d40:	e014      	b.n	8003d6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fd f8a7 	bl	8000e94 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4a:	f7fd f8a3 	bl	8000e94 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0af      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1ee      	bne.n	8003d4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d105      	bne.n	8003d7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d72:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a55      	ldr	r2, [pc, #340]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 809b 	beq.w	8003ebe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d88:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d05c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d141      	bne.n	8003e20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9c:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da2:	f7fd f877 	bl	8000e94 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd f873 	bl	8000e94 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e081      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	019b      	lsls	r3, r3, #6
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	3b01      	subs	r3, #1
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	4937      	ldr	r1, [pc, #220]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd f84c 	bl	8000e94 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd f848 	bl	8000e94 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e056      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x41c>
 8003e1e:	e04e      	b.n	8003ebe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_OscConfig+0x4ec>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fd f835 	bl	8000e94 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fd f831 	bl	8000e94 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e03f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x44a>
 8003e4c:	e037      	b.n	8003ebe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e032      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d028      	beq.n	8003eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d121      	bne.n	8003eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d11a      	bne.n	8003eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d111      	bne.n	8003eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	42470060 	.word	0x42470060

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fc ff66 	bl	8000e94 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fc ff62 	bl	8000e94 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f821 	bl	80040a0 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc fec6 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	0800533c 	.word	0x0800533c
 8004098:	2000001c 	.word	0x2000001c
 800409c:	20000020 	.word	0x20000020

080040a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	2300      	movs	r3, #0
 80040b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b8:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 030c 	and.w	r3, r3, #12
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d00d      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x40>
 80040c4:	2b08      	cmp	r3, #8
 80040c6:	f200 80bd 	bhi.w	8004244 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x34>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d003      	beq.n	80040da <HAL_RCC_GetSysClockFreq+0x3a>
 80040d2:	e0b7      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b61      	ldr	r3, [pc, #388]	; (800425c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80040d6:	60bb      	str	r3, [r7, #8]
       break;
 80040d8:	e0b7      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040da:	4b61      	ldr	r3, [pc, #388]	; (8004260 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80040dc:	60bb      	str	r3, [r7, #8]
      break;
 80040de:	e0b4      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e0:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ea:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d04d      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	099b      	lsrs	r3, r3, #6
 80040fc:	461a      	mov	r2, r3
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	ea02 0800 	and.w	r8, r2, r0
 800410e:	ea03 0901 	and.w	r9, r3, r1
 8004112:	4640      	mov	r0, r8
 8004114:	4649      	mov	r1, r9
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	014b      	lsls	r3, r1, #5
 8004120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004124:	0142      	lsls	r2, r0, #5
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	ebb0 0008 	subs.w	r0, r0, r8
 800412e:	eb61 0109 	sbc.w	r1, r1, r9
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	018b      	lsls	r3, r1, #6
 800413c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004140:	0182      	lsls	r2, r0, #6
 8004142:	1a12      	subs	r2, r2, r0
 8004144:	eb63 0301 	sbc.w	r3, r3, r1
 8004148:	f04f 0000 	mov.w	r0, #0
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	00d9      	lsls	r1, r3, #3
 8004152:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004156:	00d0      	lsls	r0, r2, #3
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	eb12 0208 	adds.w	r2, r2, r8
 8004160:	eb43 0309 	adc.w	r3, r3, r9
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0259      	lsls	r1, r3, #9
 800416e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004172:	0250      	lsls	r0, r2, #9
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	461a      	mov	r2, r3
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	f7fc f828 	bl	80001d8 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e04a      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b31      	ldr	r3, [pc, #196]	; (8004258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	461a      	mov	r2, r3
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	ea02 0400 	and.w	r4, r2, r0
 80041aa:	ea03 0501 	and.w	r5, r3, r1
 80041ae:	4620      	mov	r0, r4
 80041b0:	4629      	mov	r1, r5
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	014b      	lsls	r3, r1, #5
 80041bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041c0:	0142      	lsls	r2, r0, #5
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	1b00      	subs	r0, r0, r4
 80041c8:	eb61 0105 	sbc.w	r1, r1, r5
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	018b      	lsls	r3, r1, #6
 80041d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041da:	0182      	lsls	r2, r0, #6
 80041dc:	1a12      	subs	r2, r2, r0
 80041de:	eb63 0301 	sbc.w	r3, r3, r1
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f04f 0100 	mov.w	r1, #0
 80041ea:	00d9      	lsls	r1, r3, #3
 80041ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041f0:	00d0      	lsls	r0, r2, #3
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	1912      	adds	r2, r2, r4
 80041f8:	eb45 0303 	adc.w	r3, r5, r3
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	0299      	lsls	r1, r3, #10
 8004206:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800420a:	0290      	lsls	r0, r2, #10
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	461a      	mov	r2, r3
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	f7fb ffdc 	bl	80001d8 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4613      	mov	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	3301      	adds	r3, #1
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	60bb      	str	r3, [r7, #8]
      break;
 8004242:	e002      	b.n	800424a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004246:	60bb      	str	r3, [r7, #8]
      break;
 8004248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424a:	68bb      	ldr	r3, [r7, #8]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_RCC_GetHCLKFreq+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2000001c 	.word	0x2000001c

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff0 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0a9b      	lsrs	r3, r3, #10
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	0800534c 	.word	0x0800534c

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffdc 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0b5b      	lsrs	r3, r3, #13
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800534c 	.word	0x0800534c

080042cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e041      	b.n	8004362 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d106      	bne.n	80042f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7fc fc4c 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f000 fb0e 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e041      	b.n	8004400 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f839 	bl	8004408 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fabf 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d122      	bne.n	8004478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d11b      	bne.n	8004478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f06f 0202 	mvn.w	r2, #2
 8004448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fa46 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004464:	e005      	b.n	8004472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa38 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa49 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b04      	cmp	r3, #4
 8004484:	d122      	bne.n	80044cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d11b      	bne.n	80044cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0204 	mvn.w	r2, #4
 800449c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fa1c 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa0e 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa1f 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0208 	mvn.w	r2, #8
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9f2 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f9e4 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f9f5 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0310 	and.w	r3, r3, #16
 800452a:	2b10      	cmp	r3, #16
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b10      	cmp	r3, #16
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0210 	mvn.w	r2, #16
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2208      	movs	r2, #8
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9c8 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9ba 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f9cb 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0201 	mvn.w	r2, #1
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fc f98e 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d10e      	bne.n	80045cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d107      	bne.n	80045cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 fc60 	bl	8004e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d10e      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d107      	bne.n	80045f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f990 	bl	8004918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d10e      	bne.n	8004624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d107      	bne.n	8004624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0220 	mvn.w	r2, #32
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fc2a 	bl	8004e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004642:	2302      	movs	r3, #2
 8004644:	e082      	b.n	800474c <HAL_TIM_IC_ConfigChannel+0x120>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f000 f9e2 	bl	8004a2c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 020c 	bic.w	r2, r2, #12
 8004676:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
 800468a:	e05a      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b04      	cmp	r3, #4
 8004690:	d11c      	bne.n	80046cc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f000 fa5a 	bl	8004b5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6999      	ldr	r1, [r3, #24]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	619a      	str	r2, [r3, #24]
 80046ca:	e03a      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d11b      	bne.n	800470a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f000 faa7 	bl	8004c34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 020c 	bic.w	r2, r2, #12
 80046f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69d9      	ldr	r1, [r3, #28]
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	61da      	str	r2, [r3, #28]
 8004708:	e01b      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 fac7 	bl	8004cac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69da      	ldr	r2, [r3, #28]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800472c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69d9      	ldr	r1, [r3, #28]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	021a      	lsls	r2, r3, #8
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_TIM_ConfigClockSource+0x18>
 8004768:	2302      	movs	r3, #2
 800476a:	e0b3      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x180>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800478a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004792:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a4:	d03e      	beq.n	8004824 <HAL_TIM_ConfigClockSource+0xd0>
 80047a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047aa:	f200 8087 	bhi.w	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b2:	f000 8085 	beq.w	80048c0 <HAL_TIM_ConfigClockSource+0x16c>
 80047b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ba:	d87f      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047bc:	2b70      	cmp	r3, #112	; 0x70
 80047be:	d01a      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0xa2>
 80047c0:	2b70      	cmp	r3, #112	; 0x70
 80047c2:	d87b      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047c4:	2b60      	cmp	r3, #96	; 0x60
 80047c6:	d050      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x116>
 80047c8:	2b60      	cmp	r3, #96	; 0x60
 80047ca:	d877      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047cc:	2b50      	cmp	r3, #80	; 0x50
 80047ce:	d03c      	beq.n	800484a <HAL_TIM_ConfigClockSource+0xf6>
 80047d0:	2b50      	cmp	r3, #80	; 0x50
 80047d2:	d873      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d058      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x136>
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d86f      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d064      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x156>
 80047e0:	2b30      	cmp	r3, #48	; 0x30
 80047e2:	d86b      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d060      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x156>
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d867      	bhi.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d05c      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x156>
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d05a      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047f4:	e062      	b.n	80048bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6899      	ldr	r1, [r3, #8]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f000 faa9 	bl	8004d5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004818:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	609a      	str	r2, [r3, #8]
      break;
 8004822:	e04e      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6899      	ldr	r1, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f000 fa92 	bl	8004d5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004846:	609a      	str	r2, [r3, #8]
      break;
 8004848:	e03b      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	461a      	mov	r2, r3
 8004858:	f000 f950 	bl	8004afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2150      	movs	r1, #80	; 0x50
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fa5f 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 8004868:	e02b      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 f9ac 	bl	8004bd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2160      	movs	r1, #96	; 0x60
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa4f 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 8004888:	e01b      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 f930 	bl	8004afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2140      	movs	r1, #64	; 0x40
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fa3f 	bl	8004d26 <TIM_ITRx_SetConfig>
      break;
 80048a8:	e00b      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f000 fa36 	bl	8004d26 <TIM_ITRx_SetConfig>
        break;
 80048ba:	e002      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a34      	ldr	r2, [pc, #208]	; (8004a10 <TIM_Base_SetConfig+0xe4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00f      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d00b      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a31      	ldr	r2, [pc, #196]	; (8004a14 <TIM_Base_SetConfig+0xe8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d007      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <TIM_Base_SetConfig+0xec>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_Base_SetConfig+0x38>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a2f      	ldr	r2, [pc, #188]	; (8004a1c <TIM_Base_SetConfig+0xf0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d108      	bne.n	8004976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a25      	ldr	r2, [pc, #148]	; (8004a10 <TIM_Base_SetConfig+0xe4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01b      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004984:	d017      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <TIM_Base_SetConfig+0xe8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <TIM_Base_SetConfig+0xec>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00f      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <TIM_Base_SetConfig+0xf0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00b      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <TIM_Base_SetConfig+0xf4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <TIM_Base_SetConfig+0xf8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d003      	beq.n	80049b6 <TIM_Base_SetConfig+0x8a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <TIM_Base_SetConfig+0xfc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d108      	bne.n	80049c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <TIM_Base_SetConfig+0xe4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d103      	bne.n	80049fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	615a      	str	r2, [r3, #20]
}
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40014000 	.word	0x40014000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <TIM_TI1_SetConfig+0xbc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <TIM_TI1_SetConfig+0x56>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d00f      	beq.n	8004a82 <TIM_TI1_SetConfig+0x56>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a21      	ldr	r2, [pc, #132]	; (8004aec <TIM_TI1_SetConfig+0xc0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00b      	beq.n	8004a82 <TIM_TI1_SetConfig+0x56>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <TIM_TI1_SetConfig+0xc4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d007      	beq.n	8004a82 <TIM_TI1_SetConfig+0x56>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a1f      	ldr	r2, [pc, #124]	; (8004af4 <TIM_TI1_SetConfig+0xc8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d003      	beq.n	8004a82 <TIM_TI1_SetConfig+0x56>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <TIM_TI1_SetConfig+0xcc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <TIM_TI1_SetConfig+0x5a>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <TIM_TI1_SetConfig+0x5c>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e003      	b.n	8004aa6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f023 030a 	bic.w	r3, r3, #10
 8004ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 030a 	and.w	r3, r3, #10
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40014000 	.word	0x40014000

08004afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0201 	bic.w	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f023 030a 	bic.w	r3, r3, #10
 8004b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b087      	sub	sp, #28
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f023 0210 	bic.w	r2, r3, #16
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	031b      	lsls	r3, r3, #12
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f023 0210 	bic.w	r2, r3, #16
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	031b      	lsls	r3, r3, #12
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	621a      	str	r2, [r3, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004c84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	031b      	lsls	r3, r3, #12
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	031b      	lsls	r3, r3, #12
 8004d04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	621a      	str	r2, [r3, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	371c      	adds	r7, #28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f043 0307 	orr.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	609a      	str	r2, [r3, #8]
}
 8004d50:	bf00      	nop
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	021a      	lsls	r2, r3, #8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e050      	b.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e00:	d013      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40014000 	.word	0x40014000

08004e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e03f      	b.n	8004f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb feb2 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f829 	bl	8004f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f40:	b09f      	sub	sp, #124	; 0x7c
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f52:	68d9      	ldr	r1, [r3, #12]
 8004f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	ea40 0301 	orr.w	r3, r0, r1
 8004f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f80:	f021 010c 	bic.w	r1, r1, #12
 8004f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9a:	6999      	ldr	r1, [r3, #24]
 8004f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	ea40 0301 	orr.w	r3, r0, r1
 8004fa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4bc5      	ldr	r3, [pc, #788]	; (80052c0 <UART_SetConfig+0x384>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d004      	beq.n	8004fba <UART_SetConfig+0x7e>
 8004fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4bc3      	ldr	r3, [pc, #780]	; (80052c4 <UART_SetConfig+0x388>)
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d103      	bne.n	8004fc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fba:	f7ff f973 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8004fbe:	6778      	str	r0, [r7, #116]	; 0x74
 8004fc0:	e002      	b.n	8004fc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fc2:	f7ff f95b 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8004fc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fd0:	f040 80b6 	bne.w	8005140 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd6:	461c      	mov	r4, r3
 8004fd8:	f04f 0500 	mov.w	r5, #0
 8004fdc:	4622      	mov	r2, r4
 8004fde:	462b      	mov	r3, r5
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	6439      	str	r1, [r7, #64]	; 0x40
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fec:	1912      	adds	r2, r2, r4
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f04f 0100 	mov.w	r1, #0
 8004ffa:	00d9      	lsls	r1, r3, #3
 8004ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005000:	00d0      	lsls	r0, r2, #3
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	1911      	adds	r1, r2, r4
 8005008:	6639      	str	r1, [r7, #96]	; 0x60
 800500a:	416b      	adcs	r3, r5
 800500c:	667b      	str	r3, [r7, #100]	; 0x64
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	1891      	adds	r1, r2, r2
 800501a:	63b9      	str	r1, [r7, #56]	; 0x38
 800501c:	415b      	adcs	r3, r3
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005024:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005028:	f7fb f8d6 	bl	80001d8 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4ba5      	ldr	r3, [pc, #660]	; (80052c8 <UART_SetConfig+0x38c>)
 8005032:	fba3 2302 	umull	r2, r3, r3, r2
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	011e      	lsls	r6, r3, #4
 800503a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800503c:	461c      	mov	r4, r3
 800503e:	f04f 0500 	mov.w	r5, #0
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	1891      	adds	r1, r2, r2
 8005048:	6339      	str	r1, [r7, #48]	; 0x30
 800504a:	415b      	adcs	r3, r3
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
 800504e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005052:	1912      	adds	r2, r2, r4
 8005054:	eb45 0303 	adc.w	r3, r5, r3
 8005058:	f04f 0000 	mov.w	r0, #0
 800505c:	f04f 0100 	mov.w	r1, #0
 8005060:	00d9      	lsls	r1, r3, #3
 8005062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005066:	00d0      	lsls	r0, r2, #3
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	1911      	adds	r1, r2, r4
 800506e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005070:	416b      	adcs	r3, r5
 8005072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	461a      	mov	r2, r3
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	1891      	adds	r1, r2, r2
 8005080:	62b9      	str	r1, [r7, #40]	; 0x28
 8005082:	415b      	adcs	r3, r3
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800508a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800508e:	f7fb f8a3 	bl	80001d8 <__aeabi_uldivmod>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4b8c      	ldr	r3, [pc, #560]	; (80052c8 <UART_SetConfig+0x38c>)
 8005098:	fba3 1302 	umull	r1, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	2164      	movs	r1, #100	; 0x64
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	3332      	adds	r3, #50	; 0x32
 80050aa:	4a87      	ldr	r2, [pc, #540]	; (80052c8 <UART_SetConfig+0x38c>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b8:	441e      	add	r6, r3
 80050ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050bc:	4618      	mov	r0, r3
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	1894      	adds	r4, r2, r2
 80050c8:	623c      	str	r4, [r7, #32]
 80050ca:	415b      	adcs	r3, r3
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
 80050ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050d2:	1812      	adds	r2, r2, r0
 80050d4:	eb41 0303 	adc.w	r3, r1, r3
 80050d8:	f04f 0400 	mov.w	r4, #0
 80050dc:	f04f 0500 	mov.w	r5, #0
 80050e0:	00dd      	lsls	r5, r3, #3
 80050e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050e6:	00d4      	lsls	r4, r2, #3
 80050e8:	4622      	mov	r2, r4
 80050ea:	462b      	mov	r3, r5
 80050ec:	1814      	adds	r4, r2, r0
 80050ee:	653c      	str	r4, [r7, #80]	; 0x50
 80050f0:	414b      	adcs	r3, r1
 80050f2:	657b      	str	r3, [r7, #84]	; 0x54
 80050f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	461a      	mov	r2, r3
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	61b9      	str	r1, [r7, #24]
 8005102:	415b      	adcs	r3, r3
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800510a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800510e:	f7fb f863 	bl	80001d8 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4b6c      	ldr	r3, [pc, #432]	; (80052c8 <UART_SetConfig+0x38c>)
 8005118:	fba3 1302 	umull	r1, r3, r3, r2
 800511c:	095b      	lsrs	r3, r3, #5
 800511e:	2164      	movs	r1, #100	; 0x64
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	3332      	adds	r3, #50	; 0x32
 800512a:	4a67      	ldr	r2, [pc, #412]	; (80052c8 <UART_SetConfig+0x38c>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f003 0207 	and.w	r2, r3, #7
 8005136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4432      	add	r2, r6
 800513c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800513e:	e0b9      	b.n	80052b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005142:	461c      	mov	r4, r3
 8005144:	f04f 0500 	mov.w	r5, #0
 8005148:	4622      	mov	r2, r4
 800514a:	462b      	mov	r3, r5
 800514c:	1891      	adds	r1, r2, r2
 800514e:	6139      	str	r1, [r7, #16]
 8005150:	415b      	adcs	r3, r3
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005158:	1912      	adds	r2, r2, r4
 800515a:	eb45 0303 	adc.w	r3, r5, r3
 800515e:	f04f 0000 	mov.w	r0, #0
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	00d9      	lsls	r1, r3, #3
 8005168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800516c:	00d0      	lsls	r0, r2, #3
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	eb12 0804 	adds.w	r8, r2, r4
 8005176:	eb43 0905 	adc.w	r9, r3, r5
 800517a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	008b      	lsls	r3, r1, #2
 800518e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005192:	0082      	lsls	r2, r0, #2
 8005194:	4640      	mov	r0, r8
 8005196:	4649      	mov	r1, r9
 8005198:	f7fb f81e 	bl	80001d8 <__aeabi_uldivmod>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4b49      	ldr	r3, [pc, #292]	; (80052c8 <UART_SetConfig+0x38c>)
 80051a2:	fba3 2302 	umull	r2, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	011e      	lsls	r6, r3, #4
 80051aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ac:	4618      	mov	r0, r3
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	1894      	adds	r4, r2, r2
 80051b8:	60bc      	str	r4, [r7, #8]
 80051ba:	415b      	adcs	r3, r3
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051c2:	1812      	adds	r2, r2, r0
 80051c4:	eb41 0303 	adc.w	r3, r1, r3
 80051c8:	f04f 0400 	mov.w	r4, #0
 80051cc:	f04f 0500 	mov.w	r5, #0
 80051d0:	00dd      	lsls	r5, r3, #3
 80051d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051d6:	00d4      	lsls	r4, r2, #3
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	1814      	adds	r4, r2, r0
 80051de:	64bc      	str	r4, [r7, #72]	; 0x48
 80051e0:	414b      	adcs	r3, r1
 80051e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	008b      	lsls	r3, r1, #2
 80051f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051fc:	0082      	lsls	r2, r0, #2
 80051fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005202:	f7fa ffe9 	bl	80001d8 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <UART_SetConfig+0x38c>)
 800520c:	fba3 1302 	umull	r1, r3, r3, r2
 8005210:	095b      	lsrs	r3, r3, #5
 8005212:	2164      	movs	r1, #100	; 0x64
 8005214:	fb01 f303 	mul.w	r3, r1, r3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	3332      	adds	r3, #50	; 0x32
 800521e:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <UART_SetConfig+0x38c>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800522a:	441e      	add	r6, r3
 800522c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522e:	4618      	mov	r0, r3
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	1894      	adds	r4, r2, r2
 800523a:	603c      	str	r4, [r7, #0]
 800523c:	415b      	adcs	r3, r3
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005244:	1812      	adds	r2, r2, r0
 8005246:	eb41 0303 	adc.w	r3, r1, r3
 800524a:	f04f 0400 	mov.w	r4, #0
 800524e:	f04f 0500 	mov.w	r5, #0
 8005252:	00dd      	lsls	r5, r3, #3
 8005254:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005258:	00d4      	lsls	r4, r2, #3
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	eb12 0a00 	adds.w	sl, r2, r0
 8005262:	eb43 0b01 	adc.w	fp, r3, r1
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	008b      	lsls	r3, r1, #2
 800527a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800527e:	0082      	lsls	r2, r0, #2
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	f7fa ffa8 	bl	80001d8 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <UART_SetConfig+0x38c>)
 800528e:	fba3 1302 	umull	r1, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2164      	movs	r1, #100	; 0x64
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	3332      	adds	r3, #50	; 0x32
 80052a0:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <UART_SetConfig+0x38c>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 020f 	and.w	r2, r3, #15
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4432      	add	r2, r6
 80052b2:	609a      	str	r2, [r3, #8]
}
 80052b4:	bf00      	nop
 80052b6:	377c      	adds	r7, #124	; 0x7c
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052be:	bf00      	nop
 80052c0:	40011000 	.word	0x40011000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	51eb851f 	.word	0x51eb851f

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4d0d      	ldr	r5, [pc, #52]	; (8005304 <__libc_init_array+0x38>)
 80052d0:	4c0d      	ldr	r4, [pc, #52]	; (8005308 <__libc_init_array+0x3c>)
 80052d2:	1b64      	subs	r4, r4, r5
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	2600      	movs	r6, #0
 80052d8:	42a6      	cmp	r6, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	4d0b      	ldr	r5, [pc, #44]	; (800530c <__libc_init_array+0x40>)
 80052de:	4c0c      	ldr	r4, [pc, #48]	; (8005310 <__libc_init_array+0x44>)
 80052e0:	f000 f820 	bl	8005324 <_init>
 80052e4:	1b64      	subs	r4, r4, r5
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	2600      	movs	r6, #0
 80052ea:	42a6      	cmp	r6, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f4:	4798      	blx	r3
 80052f6:	3601      	adds	r6, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fe:	4798      	blx	r3
 8005300:	3601      	adds	r6, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	0800535c 	.word	0x0800535c
 8005308:	0800535c 	.word	0x0800535c
 800530c:	0800535c 	.word	0x0800535c
 8005310:	08005360 	.word	0x08005360

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <_init>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <_fini>:
 8005330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005332:	bf00      	nop
 8005334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005336:	bc08      	pop	{r3}
 8005338:	469e      	mov	lr, r3
 800533a:	4770      	bx	lr
